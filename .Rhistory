casexwhen=function(input, criteria, output, lastelse=NULL, lookup=NULL)
{
#this function aims to replicate the case x when idea from sql where you have one input and a basic 1-1 or many-1 mapping based on equalities
#input is the input vector or column from df
# criteria is the mapping input for the mapping
#output is the output value of the map
#lookup is a dataframe with the criteria as column 1 and output as column 2, when specified takes priority over the specified input and output
oneitem=function(input, criteria, output, lastelse=NULL)
{
#deals with the basic case of one item
if(length(which(criteria==input))>0)
{
return(output[min(which(criteria==input))])
}else
if(!is.null(lastelse))
{
return(lastelse)
}else
{
return(NA)
}
}
if(!is.null(lookup))
{
#remaps to citeria and output
criteria=unlist(lookup[1])
output=unlist(lookup[2])
}
if(class(input)!=class(criteria))
{
#checks the input and criteria are of the same type
stop(paste("Input is ", class(input), "and Criteria is ", class(criteria), ". Types must match" ))
}else
if(length(criteria)!=length(output))
{
# checks the criteria and output are of the same length
stop("Criteria and output are of differing lengths")
}else
{
# uses lapply to do each item of the vector and the unlists and unnames.
return(unname(unlist(lapply(input, oneitem, criteria=criteria, output=output, lastelse=lastelse))))
}
}
casexwhen=function(input, criteria, output, lastelse=NULL, lookup=NULL)
{
#this function aims to replicate the case x when idea from sql where you have one input and a basic 1-1 or many-1 mapping based on equalities
#input is the input vector or column from df
# criteria is the mapping input for the mapping
#output is the output value of the map
#lookup is a dataframe with the criteria as column 1 and output as column 2, when specified takes priority over the specified input and output
oneitem=function(input, criteria, output, lastelse=NULL)
{
#deals with the basic case of one item
if(length(which(criteria==input))>0)
{
return(output[min(which(criteria==input))])
}else
if(!is.null(lastelse))
{
return(lastelse)
}else
{
return(NA)
}
}
if(!is.null(lookup))
{
#remaps to citeria and output
criteria=unlist(lookup[1])
output=unlist(lookup[2])
}
if(class(input)!=class(criteria))
{
#checks the input and criteria are of the same type
stop(paste("Input is ", class(input), "and Criteria is ", class(criteria), ". Types must match" ))
}else
if(length(criteria)!=length(output))
{
# checks the criteria and output are of the same length
stop("Criteria and output are of differing lengths")
}else
{
# uses lapply to do each item of the vector and the unlists and unnames.
return(unname(unlist(lapply(input, oneitem, criteria=criteria, output=output, lastelse=lastelse))))
}
}
caseXwhen=function(input, criteria, output, lastelse=NULL, lookup=NULL)
{
#this function aims to replicate the case x when idea from sql where you have one input and a basic 1-1 or many-1 mapping based on equalities
#input is the input vector or column from df
# criteria is the mapping input for the mapping
#output is the output value of the map
#lookup is a dataframe with the criteria as column 1 and output as column 2, when specified takes priority over the specified input and output
oneitem=function(input, criteria, output, lastelse=NULL)
{
#deals with the basic case of one item
if(length(which(criteria==input))>0)
{
return(output[min(which(criteria==input))])
}else
if(!is.null(lastelse))
{
return(lastelse)
}else
{
return(NA)
}
}
if(!is.null(lookup))
{
#remaps to citeria and output
criteria=unlist(lookup[1])
output=unlist(lookup[2])
}
if(class(input)!=class(criteria))
{
#checks the input and criteria are of the same type
stop(paste("Input is ", class(input), "and Criteria is ", class(criteria), ". Types must match" ))
}else
if(length(criteria)!=length(output))
{
# checks the criteria and output are of the same length
stop("Criteria and output are of differing lengths")
}else
{
# uses lapply to do each item of the vector and the unlists and unnames.
return(unname(unlist(lapply(input, oneitem, criteria=criteria, output=output, lastelse=lastelse))))
}
}
casexwhen(c("a", "b"), c("a", "c", "b", "d", c(1,2,3,4)))
casexwhen(c("a", "b"), c("a", "c", "b", "d"), c(1,2,3,4))
casexwhen=function(input, map_in, map_out, lastelse=NULL, map_df=NULL)
{
#this function aims to replicate the case x when idea from sql where you have one input and a basic 1-1 or many-1 mapping based on equalities
#input is the input vector or column from df
#map_in is the mapping input for the mapping
#map_out is the output value of the map
#map_dfis a dataframe with the criteria as column 1 and output as column 2, when specified takes priority over the specified input and output
oneitem=function(input, map_in, map_out, lastelse=NULL)
{
#deals with the basic case of one item
if(length(which(map_in==input))>0)
{
return(map_out[min(which(map_in==input))])
}else
if(!is.null(lastelse))
{
return(lastelse)
}else
{
return(NA)
}
}
if(!is.null(map_df))
{
#remaps to citeria and output
map_in=unlist(map_df[1])
map_out=unlist(map_df[2])
}
if(class(input)!=class(map_in))
{
#checks the input and criteria are of the same type
stop(paste("Input is ", class(input), "and map_in is ", class(map_in), ". Types must match" ))
}else
if(length(map_in)!=length(map_out))
{
# checks the criteria and output are of the same length
stop("Criteria and output are of differing lengths")
}else
{
# uses lapply to do each item of the vector and the unlists and unnames.
return(unname(unlist(lapply(input, oneitem, map_in=map_in, map_out=map_out, lastelse=lastelse))))
}
}
casexwhen(c("a", "b"), c("a", "c", "b", "d"), c(1,2,3,4))
casexwhen(map_in=c("a", "b"), c("a", "c", "b", "d"), c(1,2,3,4))
casexwhen=function(input, map_in, map_out, lastelse=NULL, map_df=NULL)
{
#this function aims to replicate the case x when idea from sql where you have one input and a basic 1-1 or many-1 mapping based on equalities
#input is the input vector or column from df
#map_in is the mapping input for the mapping
#map_out is the output value of the map
#map_dfis a dataframe with the criteria as column 1 and output as column 2, when specified takes priority over the specified input and output
oneitem=function(input, map_in, map_out, lastelse=NULL)
{
#deals with the basic case of one item
if(length(which(map_in==input))>0)
{
return(map_out[min(which(map_in==input))])
}else
if(!is.null(lastelse))
{
return(lastelse)
}else
{
return(NA)
}
}
if(!is.null(map_df))
{
#remaps to citeria and output
map_in=unlist(map_df[1])
map_out=unlist(map_df[2])
}
if(class(input)!=class(map_in))
{
#checks the input and criteria are of the same type
stop(paste("Input is ", class(input), "and map_in is ", class(map_in), ". Types must match" ))
}else
if(length(map_in)!=length(map_out))
{
# checks the criteria and output are of the same length
stop("Criteria and output are of differing lengths")
}else
{
# uses lapply to do each item of the vector and the unlists and unnames.
return(unname(unlist(lapply(input, oneitem, map_in=map_in, map_out=map_out, lastelse=lastelse))))
}
}
casexwhen(c("a", "b"), map_in=c("a", "c", "b", "d"), c(1,2,3,4))
devtools::document()
devtools::document()
devtools::document()
usethis::use_testthat()
devtools::load_all(".")
caseXwhen::casexwhen(c("a", "c"), c("a", "b", "c", "d"), c(1,2,3,4))
test_check("caseXwhen")
document()
devtools::document()
test_check("caseXwhen")
usethis::use_mit_license()
